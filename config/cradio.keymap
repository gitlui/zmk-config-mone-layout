// Copyright (c) 2022 The ZMK Contributors
// SPDX-License-Identifier: MIT
#include "./german_aliases.h"
#include <behaviors.dtsi>
#include <dt-bindings/zmk/keys.h>
#include <dt-bindings/zmk/bt.h>
#include <dt-bindings/zmk/outputs.h>

#define SYM 1
#define MOV 2
#define EXT 3

#define HO(key) &ht LALT key
#define HS(key) &ht LSHFT key
#define HG(key) &ht LGUI key
#define HC(key) &ht LCTL key
#define KP(key) &kp key
#define LAY(layername) &mo layername
#define ST(key) &sk key

#define COMBO(NAME, BINDINGS, KEYPOS) \
  combo_##NAME { \
    timeout-ms = <50>; \
    bindings = <BINDINGS>; \
    key-positions = <KEYPOS>; \
    layers = <0>; \
  };

/ {
    combos {
        compatible = "zmk,combos";
        COMBO(at, &kp LA(DE_L), 15 0)
        COMBO(ae, &kp DE_AE, 15 10)
        COMBO(sz, &kp DE_SS, 15 12)
        COMBO(ue, &kp DE_UE, 14 7)
        COMBO(oe, &kp DE_OE, 14 19)
        COMBO(eur, &kp DE_EURO, 14 17)
    };

    behaviors {
        ht: hold_tap {
            label = "hold_tap";
            compatible = "zmk,behavior-hold-tap";
            #binding-cells = <2>;
            flavor = "tap-preferred";
            tapping-term-ms = <220>;
            quick-tap-ms = <150>;
            global-quick-tap;
            bindings = <&kp>, <&kp>;
        };

        skq: sticky_key_quick_release {
            compatible = "zmk,behavior-sticky-key";
            label = "STICKY_KEY_QUICK_RELEASE";
            #binding-cells = <1>;
            bindings = <&kp>;
            release-after-ms = <1000>;
            quick-release;
        };
    };

    keymap {
        compatible = "zmk,keymap";
        default_layer {
            bindings = <
                KP(DE_Q) KP(DE_W) KP(DE_F) KP(DE_P)  KP(DE_G)    KP(DE_J) KP(DE_L)  KP(DE_U)    KP(DE_Y)   KP(DE_QUES)
                HC(DE_A) HO(DE_R) HS(DE_S) HG(DE_T)  KP(DE_D)    KP(DE_H) HG(DE_N)  HS(DE_E)    HO(DE_I)   HC(DE_O)
                KP(DE_Z) KP(DE_X) KP(DE_C) KP(DE_V)  KP(DE_B)    KP(DE_K) KP(DE_M)  KP(DE_COMM) KP(DE_DOT) KP(DE_MINS)
                                           KP(LSHFT) LAY(MOV)    LAY(SYM) KP(SPACE)
            >;
        }; 

        symbols {
            bindings = <
                KP(DE_ASTR) KP(DE_HASH) KP(DE_QUOT) KP(DE_DQUO) KP(DE_AMPR)     KP(LA(N7))     KP(DE_EXLM) KP(DE_EQL)  KP(DE_DLR)  KP(DE_PLUS)
                KP(N1)      KP(N2)      KP(N3)      KP(N4)      KP(N5)          KP(N6)         KP(N7)      KP(N8)      KP(N9)      KP(N0)
                KP(DE_LABK) KP(LA(N5))  KP(DE_LPRN) KP(DE_LBRC) KP(DE_SLSH)     KP(LA(LS(N7))) KP(LA(N9))  KP(DE_RPRN) KP(LA(N6))  KP(DE_RABK)
                                                    KP(LSHFT)   LAY(EXT)        &trans         &trans
            >;
        };

        movement {
            bindings = <
                KP(ESC)      KP(LC(DE_W)) KP(LC(DE_F))  KP(LC(DE_P)) KP(LC(DE_T))     KP(DEL)          KP(LC(LEFT))     KP(UP)      KP(LC(RIGHT)) KP(PG_UP)
                &sk LCTL     &sk LALT     &sk LSHFT     &sk LGUI     KP(LG(SPACE))    KP(BSPC)         KP(LEFT)         KP(DOWN)    KP(RIGHT)     KP(PG_DN)
                KP(LG(DE_Z)) KP(LG(DE_X)) KP(LG(DE_C))  KP(LG(DE_V)) KP(LA(DE_V))     KP(LC(LA(DE_T))) KP(LC(LS(DE_T))) KP(LS(TAB)) KP(TAB)       &trans
                                                        &trans       &trans           LAY(EXT)         KP(RET)
            >;
        };

        extra {
            bindings = <
                KP(DE_CIRC)    KP(DE_PERC) KP(DE_GRV)  KP(LA(DE_N))  &trans      &trans KP(F7) KP(F8) KP(F9) KP(F10)
                KP(LCTL)       KP(LALT)    KP(LSHFT)   KP(LGUI)      KP(LGUI)    &trans KP(F4) KP(F5) KP(F6) KP(F11)
                &bt BT_CLR_ALL &trans      &trans      &trans        &trans      &trans KP(F1) KP(F2) KP(F3) KP(F12)
                                                       &trans        &trans      &trans &trans
            >;
        };
    };
};
